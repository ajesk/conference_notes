// by Venkat Subramanium
Where we see them?
  - Corely devs focus on design patterns
    - Finding the right pattern for a problem can be a problem
  - Priciples instead focus on why you might use a pattern.

*Strategic Design vs Tactictal Design*
Strategic = planning
Tactical => building and testing

When to use these principles:
Good for communications. Easy acronyms that all devs on your team should know.
Cohesion and coupling:
Aim for high cohesion and low coupling.
!ORTHOGINALITY!

DRY (Don't repeat yourself):
- Pretty straightforward and is beaten over your head.
- Make sure not to duplicate your code.
- "Every piece of knowledge should have a single, unambiguous, authoritative souce of representation" ---> big words are big
- Remember duplication of code ~= duplication of effort.
- Solutions:
  - Code generation (make the validations generated by rules)
    - (solution 1.5) Kotlin cross compile
  - Ajax (we can't do this
- ONLY APPLY THIS TO THINGS THAT ARE PAINFUL TO DO MORE THAN ONCE
  - "I like eating cheesecake, so I OBVIOUSLY won't apply DRY to eating cheesecake"
  
YAGNI (You aren't going to need it):
- Specifically only write what is truly needed.
Coding timing cost
$NOW    >    $LATER - postpone
$NOW    ===  $LATER - postpone
$NOW    <    $LATER - (if cost is high) ? now : later

- You should have the courage to NOT write code in some occurances
- As an example (your eyes are bigger than your stomache)

SRP (Single responsibility principle):
- What does responsibility mean:
  - SRC == cohesion
  - SLAP (Single level of abstraction principle)
    - You are writing code for people
    - Make sure not to go too granular. Look for the abstraction not the length.
- Long methods:
  - Good news: I didn't do it
  - Bad news: People who think they are good are working in the world today
  - They ae hard to understand.
  - Harder to maintain
  - Even harder yet to debug
  - "If you have to understand, maintain, or debug; you are no longer a developer, you are a victim".
  - Long methods by nature ALWAYS become longer
  - Long methods lead to duplication of code 
  - Hard if not impossible to reuse
  - Low cohesion && high coupling ======> diagonal opposite of the good design that we want
  - 65335 -> the limit of lines for a single method lol

OCP (Open Closed Principle):
  - Method should be open for extension, but closed for modification
  - You should not have to modify code to make it extensible.
  - It is easier to add code rather than to modify existing code.

LSP (Liskov's Substitution Principle):
  - Use inheritance only for substitutability and not for reuse.
    - If an object of B wants to use and object of A, then use delegation
    - If an object of B should be used where an object of A is expected, then use inheritance
  - The services of a derived class should require no more and promise no less than the corresponding services of the base class.
  - LSP IN JAVA
    Good:
      1. An instance method can't have a more restrictive privilege than the base
      2. An overriding method cannot throw any new exceptopm that the base method is not throwing
        a. unless....
    
    Bod:
      1. Enforceing the LSP with core java can cause you to invalidate OCP && SRP
      2. LSP > OCP && SRP

  - IDEA has the tool that allows you to turn extension into delegation.
    - Lombok helps enforce LSP by simplifying the delegation by making getter/setter code dynamic.
  - *Stack*
    - What is a Stack.class.
      - It inherits from a Vector.class which allows you to enter objects wherever you want.
      - Since the Stack.class is more restrictive than the Vector.class it directly violates the LSP...
      - "The only reason they would have done this, was that they were drunk"     --Venkat

DIP (Dependency Inversion Principle):
  - "Depend on an interface and not on a class"
  - Instead of a class depending on another class, both should depend on an interface !!! YES YES YES YES YES DAMMIT anyone reading my notes THIS IS IMPORTANT!!!!
  - This is commonly used to enforce the OCP.

SOLID:
S => SRP
O => OCP
L => LSP
I => Who cares :)
D => DIP